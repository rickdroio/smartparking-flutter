import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:firebase_ml_vision/firebase_ml_vision.dart';
import 'package:flushbar/flushbar.dart';
import '../service/entrada_service.dart';

//streaming based on
//https://github.com/GoogleCloudPlatform/iot-smart-home-cloud/blob/e65a1535d909639de37e8bdda81bbb8167eaed96/mobile/lib/register.dart#L55

class CameraPlaca extends StatefulWidget {
  @override
  _CameraPlacaState createState() => _CameraPlacaState();
}

//TODO
//PlatformException(textRecognizerError, Waiting for the text recognition model to be downloaded. Please wait., null)

class _CameraPlacaState extends State<CameraPlaca> {

  CameraController _controller;
  List<CameraDescription> cameras;
  int cameraSelected;
  File arquivoPlaca;

  @override
  void initState() {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);    
    initCamera();
    super.initState();    
  }

  void initCamera() async {
    try {
      cameras = await availableCameras();
      toggleCameraSelected();
    } on CameraException catch (e) {
      print(e.description);
    }    
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Identificar Placa'),
      ),
      body: _cameraPreviewWidget()
    );    
  }

  Widget _cameraPreviewWidget() {
    //print('controller.value.aspectRatio = ${controller.value.aspectRatio.toString()}');
    if (_controller == null || !_controller.value.isInitialized) {
      return Container(
        alignment: FractionalOffset.center,
        child: Text('Carregando'),
      );
    } else {
      if (arquivoPlaca == null) return _renderCameraPreview();
      else return _renderCameraTaken();
    }
  } 

  Widget _renderCameraPreview() {
    return Container(
      color: Colors.black,
      height: double.maxFinite,
      child: Stack(children: <Widget>[
        AspectRatio(aspectRatio: _controller.value.aspectRatio, child: CameraPreview(_controller)),
        AspectRatio(
          aspectRatio: _controller.value.aspectRatio,
          child: FractionallySizedBox(
              widthFactor: 0.9,
              heightFactor: 0.3,
              child: Container(decoration: 
                BoxDecoration(border: Border(
                  left: BorderSide(color: Colors.grey),
                  right: BorderSide(color: Colors.grey),
                  top: BorderSide(color: Colors.grey),
                  bottom: BorderSide(color: Colors.grey),
                ))
              ),
          )
        ),

        Positioned(
          child: Align(
            alignment: FractionalOffset.bottomCenter,
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: 80),
              child: RaisedButton(
                shape: new RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.0)),
                child: Icon(Icons.camera_alt, size: 50, color: Colors.white), 
                onPressed: () => takePicture()
              ),
            )
          ),
        ),

        Positioned(
          child: Align(
            alignment: FractionalOffset.bottomRight,
            child: Container(
              margin: EdgeInsets.only(right: 10),
              child: FlatButton(child: Icon(MdiIcons.cameraRetake, size: 30, color: Colors.white),
                onPressed: () => toggleCameraSelected()
              )
            )
          ),
        )               
      ])
    );
  }

  Widget _renderCameraTaken() {
    return Container(
      color: Colors.black,
      height: double.maxFinite,
      child: Stack(children: <Widget>[
        //Image.file(arquivoPlaca),
        AspectRatio(
          aspectRatio: _controller.value.aspectRatio, 
          child: FractionallySizedBox(
            widthFactor: 0.3,
            heightFactor: 0.2,    
            child: CircularProgressIndicator(strokeWidth: 5),
          )
        ),                  
      ])
    );
  }

  void toggleCameraSelected() async {
    if (_controller != null) {
      await _controller.dispose();
    }

    if (cameraSelected == null)
      cameraSelected = 0;
    else
      cameraSelected++;

    if (cameraSelected>cameras.length-1)
      cameraSelected = 0;

    _controller = CameraController(
      cameras[cameraSelected],
      ResolutionPreset.high,
      enableAudio: false,
    );

    await _controller.initialize().then((_) {
      if (!mounted) {
        print('Camera error NOT MOUNTED');
        return;
      }

      _controller.startImageStream(_handleCameraImage);

      // Rebuild UI once camera is fully initialized
      setState(() {});      
    });

    
    /*
    // If the controller is updated then update the UI.
    controller.addListener(() {
      print('addListener');
      if (mounted) setState(() {});
      if (controller.value.hasError) {
        print('Camera error ${controller.value.errorDescription}');
      }
    });

    try {
      await controller.initialize();
    } on CameraException catch (e) {
      print(e);
    }

    if (mounted) {
      setState(() {});
    }
    */
  } 

  String timestamp() => DateTime.now().millisecondsSinceEpoch.toString();

  Future takePicture() async {


    /*
    if (!controller.value.isInitialized) {
      print('Error: select a camera first.');
      return null;
    }

    final Directory tempDir = await getTemporaryDirectory();
    final String tempPath = tempDir.path;
    final String filePath = '$tempPath/placa${timestamp()}.jpg';

    if (controller.value.isTakingPicture) {
      // A capture is already pending, do nothing.
      return null;
    }

    //caso exista o arquivo, apaga para não gerar gasto de memoria
    /* TODO
    File arquivo = File(filePath);
    if (await arquivo.exists()) {
      print('arquivo ja existe. deletando...');
      await arquivo.delete(recursive: true);
    }
    */

    try {
      await controller.takePicture(filePath);
      await Future.delayed(Duration(seconds: 2));
    } on CameraException catch (e) {
      print(e);
      return null;
    }

    arquivoPlaca = File(filePath);
    

    var listIBytes = arquivoPlaca.readAsBytesSync();
    img.Image imageOriginal = img.decodeImage(listIBytes);

    String placa = await _identificarPlaca(imageOriginal);


    //deletar arquivo temp
    arquivoPlaca.delete();

    if (placa == null) { //placa nao encontrada
      
      Flushbar(
        duration: Duration(seconds: 5),
        message: 'Placa não identificada, tente novamente',
        icon: Icon(MdiIcons.exclamation, size: 28.0, color: Colors.red[300]),
      ).show(context);

      setState(() {
        arquivoPlaca = null;
      });
    }
    else {
      Navigator.pop(context, placa);
    }
    */
  }

  String _removeSpecialChars(String text) {
    return text.replaceAll(new RegExp(r'[\s-]'), '').toUpperCase(); //remove os espaços
  }  

  String _getPlacafromString(String placa) {
    RegExp regExp = new RegExp(EntradaService.placaRegex, caseSensitive: false, multiLine: false);
    return regExp.stringMatch(placa);
  }  

  Future<String> _identificarPlaca(img.Image image) async {
    String placa;

    FirebaseVisionImageMetadata meta = FirebaseVisionImageMetadata(
      rotation: ImageRotation.rotation0, 
      size: Size(image.width.toDouble(), image.height.toDouble()),
      rawFormat: image.

    );

    final FirebaseVisionImage visionImage = FirebaseVisionImage.fromBytes(image.getBytes(), meta);
    final TextRecognizer textRecognizer = FirebaseVision.instance.textRecognizer();
    final VisionText visionText = await textRecognizer.processImage(visionImage);

    String vtext = visionText.text;
    print('TEXTO VISION = $vtext');
    
    visionText.blocks.forEach((block) {

      final String text = block.text;
      print('TEXTO BLOCK = $text');

      block.lines.forEach((line) {
        String texto = _removeSpecialChars(line.text);
        print(texto);
        if (EntradaService.validarPlaca(texto)) {
          print('ENCONTROU PLACA $texto');
          placa = _getPlacafromString(texto);
        }
        //TODO - Melhorar trocando 1 por I, etc...
      });
    });

    textRecognizer.close();

    if (placa == null) print('PLACA NAO IDENTIFICADA');

    return placa;
  }  

void _handleCameraImage(CameraImage image) async {
    // Drop the frame if we are still scanning
    if (_scanInProgess || _barcodeDetected) return;

    _scanInProgess = true;

    // Collect all planes into a single buffer
    final WriteBuffer allBytesBuffer = WriteBuffer();
    image.planes.forEach((Plane plane) => allBytesBuffer.putUint8List(plane.bytes));
    final Uint8List allBytes = allBytesBuffer.done().buffer.asUint8List();

    // Convert the image buffer into a Firebase detector frame
    FirebaseVisionImage firebaseImage = FirebaseVisionImage.fromBytes(allBytes,
      FirebaseVisionImageMetadata(
        rawFormat: image.format.raw,
        size: Size(image.width.toDouble(), image.height.toDouble()),
        rotation: ImageRotation.rotation90,
        planeData: image.planes.map((plane) => FirebaseVisionImagePlaneMetadata(
          height: plane.height,
          width: plane.width,
          bytesPerRow: plane.bytesPerRow,
        )).toList(),
      ),
    );

    try {
      // Run detection and check for the proper QR code
      final List<Barcode> barcodes = await _detector.detectInImage(firebaseImage);
      if (barcodes.isEmpty) {
        _reportDetectionState(DetectionState.empty);
      } else {
        final Map<String, dynamic> device = await _handleBarcodeResult(barcodes[0]);
        _barcodeDetected = true;
        _reportDetectionState(DetectionState.detected);
        Navigator.of(context).pop(device);
      }
    } catch (error) {
      print(error);
      _reportDetectionState(DetectionState.invalid);
    } finally {
      _scanInProgess = false;
    }
  }

  /// Utility to update UI with scanner state
  void _reportDetectionState(DetectionState state) {
    if (mounted) {
      setState(() {
        _currentState = state;
      });
    }
  }  

}